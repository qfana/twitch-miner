import puppeteer, { Browser, BrowserContext, Page } from "puppeteer";
import { IBrowserService } from "./browser.interface";
import dotenv from 'dotenv';
dotenv.config();

export class BrowserService implements IBrowserService {
    private browser!: Browser;
    private context!: BrowserContext;
    private pages: Page[] = [];
    private readonly AUTH_TOKEN = process.env.TWITCH_AUTH_TOKEN!;
    private readonly CHROME_PATH = process.env.TWITCH_CHROME_EXECUTABLE || '/usr/bin/google-chrome';


    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–∫–∏ (—Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
     * @returns {Promise<void>}
     */
    public async init(): Promise<void>  {
        this.browser = await puppeteer.launch({
            headless: true,
            executablePath: this.CHROME_PATH,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        this.context = await this.browser.createBrowserContext();

        await this.setCookie();
    }

    public async setCookie(): Promise<void> {
        const page = await this.context?.newPage();
        const existing = await page.cookies();
        if (existing.length) await page.deleteCookie(...existing);

        await page?.setCookie({
            name: 'auth-token',
            value: this.AUTH_TOKEN,
            domain: '.twitch.tv',
            path: '/',
            httpOnly: false,
            secure: true,
        });

        await page?.close();
    }

    async openUrl(url: string): Promise<Page | void> {
        const page = await this.context?.newPage();
        if (!page) return console.warn('[BrowserService | openUrl] Page not found');

        await page.goto(url);

        this.pages?.push(page)
        return page;
    }

    async openStream(channelName: string): Promise<Page | void> {
        const url = `https://www.twitch.tv/${channelName}`;
        const page = await this.context?.newPage();
        if (!page) return console.warn('[BrowserService | openStream] Page not found');

        await page.goto(url, {
            waitUntil: 'domcontentloaded',
            timeout: 60000,
        });

        this.pages.push(page);
        console.log(`üü£ Stream opened: ${channelName}`);

        await this.acceptContentGate(page);

        return page;
    }

    private async acceptContentGate(page: Page) {
        // –°–µ–ª–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä¬ª –≤ —Ä–æ—Å—Å–∏–π—Å–∫–æ–π –ª–æ–∫–∞–ª–∏...
        const selector = 'button[data-test-selector="content-classification-gate-overlay-start-watching-button"]';
        try {
            // –ñ–¥—ë–º –¥–æ 5 —Å–µ–∫—É–Ω–¥, –≤–¥—Ä—É–≥ –ø–æ–ø–ª—ã–ª–æ —á—É—Ç—å –ø–æ–¥–æ–ª—å—à–µ
            const btn = await page.waitForSelector(selector, { timeout: 5_000 });
            if (btn) {
              console.log('[BrowserService] Content gate detected, clicking accept‚Ä¶');
              await btn.click();
              // –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥—ë–º, —á—Ç–æ–±—ã –∑–∞—Å—Ç–∞–≤–∫–∞ —Å–∫—Ä—ã–ª–∞—Å—å
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
        } catch {
          // –∫–Ω–æ–ø–∫–∏ –Ω–µ –±—ã–ª–æ –∑–∞ 5—Å–µ–∫ ‚Üí –µ—ë –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        }
    }

    async destroy() {
        for (const page of this.pages) {
            try {
                await page.close();
            } catch {}
        }
        this.pages = [];
    }

    getContext(): BrowserContext {
        return this.context;
    }

    getBrowser(): Browser {
        return this.browser;
    }

    getPages(): Page[] {
        return this.pages;
    }
}