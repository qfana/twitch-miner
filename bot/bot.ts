import { Telegraf, session, Context, Scenes } from 'telegraf';

interface BotContext extends Context {
  session: {
    step?: 'token' | 'games' | 'fallback';
  };
}

export class BotManager {
    private bot: Telegraf<BotContext>;

    constructor () {
        this.bot = new Telegraf<BotContext>(process.env.TELEGRAM_TOKEN!);

        this.Init();
    }

    public async Init() {
        this.bot.use(session());

        this.bot.start(ctx => ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'));
        this.bot.help(ctx => ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ.'));


        this.bot.command('menu', ctx => {
          ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
            reply_markup: {
              inline_keyboard: [
                [{ text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è', callback_data: 'MENU_SETTINGS' }],
                [{ text: '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∞—Ä–º ‚ñ∂Ô∏è', callback_data: 'MENU_START_FARM' }],
                [{ text: '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞—Ä–º ‚èπÔ∏è', callback_data: 'MENU_STOP_FARM' }],
                [{ text: '–°—Ç–∞—Ç—É—Å üìä', callback_data: 'MENU_STATUS' }],
                [{ text: '–ü–æ–¥–ø–∏—Å–∫–∞ üí≥', callback_data: 'MENU_SUBSCRIBE' }],
              ],
            },
          });
        });
    }

    public async launch() {
        await this.bot.launch();
        console.log('Telegram bot launched');
    }
}

const test = new BotManager();