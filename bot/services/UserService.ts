import { Markup, Telegraf } from 'telegraf';
import { BotContext } from '../bot';
import { IUserService } from './UserService.interface';
import { inlineKeyboard } from 'telegraf/typings/markup';

const TEXTS = {
    SETTINGS: `*–ù–∞—Å—Ç—Ä–æ–π–∫–∏*

üîë *–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏*  
_–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Twitch Auth Token, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–¥ –≤–∞—à–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º –∏ —Å–æ–±–∏—Ä–∞—Ç—å –¥—Ä–æ–ø—Å—ã._

üéÆ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä*  
_–£–∫–∞–∂–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–≥—Ä (–∏—Ö slug‚Äô–æ–≤) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä ¬´rust, diablo-iv, escape-from-tarkov¬ª. –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥—Ä–æ–ø‚Äë–∫–∞–º–ø–∞–Ω–∏–∏ –∏–º–µ–Ω–Ω–æ –ø–æ —ç—Ç–∏–º –∏–≥—Ä–∞–º._

üì∫ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤*  
_–î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö —Å—Ç—Ä–∏–º–µ—Ä–æ–≤ (–ª–æ–≥–∏–Ω—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é). –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä–æ–ø–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–≥—Ä–∞–º –Ω–µ –Ω–∞–π–¥—ë—Ç—Å—è, –±–æ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ —ç—Ç–∏—Ö fallback‚Äë–∫–∞–Ω–∞–ª–æ–≤._`

}
export class UserService implements IUserService {
    private bot: Telegraf<BotContext>;

    constructor(bot: Telegraf<BotContext>) {
        this.bot = bot;
    }

    async Settings(ctx: BotContext): Promise<void> {

        await ctx.reply(
            TEXTS.SETTINGS,
            {
                parse_mode: 'Markdown',
                ...Markup.inlineKeyboard([
                    [ Markup.button.callback('üîë –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª—é—á –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', 'SET_AUTH_KEY') ],
                    [ Markup.button.callback('üéÆ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–≥—Ä',                'SET_DROPS_GAME') ],
                    [ Markup.button.callback('üì∫ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∏–º–µ—Ä–æ–≤',           'SET_FALLBACK')  ],
                ])
            }
        );
    }

    async Subscribe(ctx: BotContext): Promise<void> {
        throw new Error('Method not implemented.');
    }
}